# .github/workflows/CI.yml

name: FastAPI CI

# 트리거 이벤트 부분으로 코드가 푸시되거나 풀 리퀘스트가 생성될 때 CI가 실행됩니다.
on:
  pull_request:
    branches:
        - develop

jobs:
  ci:
    runs-on: ubuntu-latest

    env:
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}

    services:
      db:
        image: postgres:latest
        ports:
          - 5433:5432
        env:
          POSTGRES_USER: ${{ env.DB_USER }}
          POSTGRES_PASSWORD: ${{ env.DB_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        options: >-
          --health-cmd="pg_isready -U ${{ env.DB_USER }}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      # Redis 서비스 설정
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping"

    steps:
    # 코드 체크아웃: 리포지토리의 코드를 가져옵니다.
    - name: Checkout code
      uses: actions/checkout@v4

    # CI 환경에서 사용할 파이썬 버젼을 지정합니다.
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.7'

    # Poetry 설치: Poetry를 설치하여 패키지 관리를 준비합니다.
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "${HOME}/.local/bin" >> $GITHUB_PATH

    - name: Check poetry.lock consistency
      run: poetry lock --no-update

    # Poetry를 사용하여 의존성 패키지들을 설치합니다.
    - name: Install Packages & Libraries
      run: poetry install --no-interaction --no-root

    # isort를 사용하여 import 구문의 정렬 순서를 체크합니다.
    - name: Run isort (Import sorting)
      run: |
        poetry run isort . --check --diff

    # black을 사용하여 PEP8 코드스타일을 준수했는지 체크합니다.
    - name: Run black (Code formatting)
      run: |
        poetry run black . --check

    # flake8 검사: 코드에서 일반적인 코드 스타일 문제를 검사합니다.
    - name: Run flake8
      run: poetry run flake8 .

    # mypy 검사: 코드 타입 검사를 수행합니다.
    - name: Run mypy
      run: poetry run mypy .

    # pylint 검사: 코드의 코드 품질을 점검합니다.
    - name: Run pylint
      run: poetry run pylint **/*.py

    # PostgreSQL이 준비될 때까지 대기: PostgreSQL의 준비 상태를 확인합니다.
    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5433 -U ${{ env.DB_USER }}; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    # Redis가 준비될 때까지 대기: Redis의 준비 상태를 확인합니다.
    - name: Wait for Redis to be ready
      run: |
        until redis-cli -h localhost ping; do
          echo "Waiting for Redis..."
          sleep 2
        done

#     pytest 실행: PostgreSQL과 Redis에 대한 테스트 및 커버리지 리포트를 생성합니다.
    - name: Run pytest
      run: |
        poetry run pytest tests/ --doctest-modules --junitxml=junit/test-results.xml --cov=app --cov-report=xml --cov-report=html
      env:
        PG_DATABASE_URL: "postgresql+asyncpg://${{ env.DB_USER }}:${{ env.DB_PASSWORD }}@localhost:5433/${{ env.DB_NAME }}"
        REDIS_URL: "redis://localhost:6379"
        POSTGRES_DB_HOST: localhost
        POSTGRES_DB_PORT: 5433
        POSTGRES_DB_USER: ${{ env.DB_USER }}
        POSTGRES_DB_PASSWORD: ${{ env.DB_PASSWORD }}
        POSTGRES_DB_NAME: ${{ env.DB_NAME }}

